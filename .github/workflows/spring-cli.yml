name: Spring CI

on:
  pull_request:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      #서브모듈 업데이트
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.TOKEN }}

      ## docker compose up (docker-compose 기반)
      - name: Build and run Docker Compose
        run: |
          docker-compose up -d
          docker image prune -f

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      #Docker의 Buildx는 Docker의 CLI 플러그인으로, Docker 이미지를 빌드하는데 사용
      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

#      #jar 파일 생성 후 docker hub에 푸시(Dockerfile 기반)
#      - name: Build and push Docker image
#        env:
#          TOKEN: ${{ secrets.TOKEN_DOCKER }}
#        run: |
#            docker build -t youngkyonyou/drrr-github-action:latest .
#            docker login -u youngyou1324@naver.com -p $TOKEN
#            docker push youngkyonyou/drrr-github-action:latest

      # Docker 레이어를 캐시하는 작업
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # ghcr.io 로그인
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      #jar 파일 생성 후 docker hub에 푸시(Dockerfile 기반)
      - name: Build and push Docker image
        env:
          TOKEN: ${{ secrets.TOKEN_DOCKER }}
        run: |
              docker build -t youngkyonyou/drrr-github-action:latest .
              docker login -u youngyou1324@naver.com -p $TOKEN
              docker push youngkyonyou/drrr-github-action:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, drrr-label ]
    env:
      NAME: drrr-runner
    # label-superman 라는 이름으로 AWS EC2 가 Runner 를 작동시킬 때 사용했던 그 label
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker run
        # ${{ env.NAME}} - drrr-runner
        run: |
             docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.NAME }} 
             docker run -d -p 8081:8081 --name drrr-runner --restart always youngkyonyou/drrr-github-action:latest
             cp Dockerfile /var/lib/docker/tmp/buildkit-mount133206748/Dockerfile
             docker build -t ghcr.io/youngkyonyou/drrr-github-action:latest .
             docker push ghcr.io/youngkyonyou/drrr-github-action:latest
