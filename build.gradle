/*
buildscript {
    ext {
        springBootVersion = '3.2.0-M1'
        queryDslVersion = '5.0.0'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.1.2.RELEASE"
        // Querydsl 의존성
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}"
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = '17'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    apply plugin: "com.ewerk.gradle.plugins.querydsl"
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.jetbrains:annotations:23.0.0'
        implementation 'com.h2database:h2'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.springframework.security:spring-security-test'

        // === QueryDsl 시작 ===

        // == 스프링 부트 3.0 이상 ==
        // for QueryDSL
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        // === QueryDsl 끝 ===

        // mysql connector
        runtimeOnly 'com.mysql:mysql-connector-j'

    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    // QueryDSL 설정
    def querydslDir = "$buildDir/generated/querydsl"

    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        querydslSourcesDir = querydslDir
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', querydslDir]
            }
        }
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    configurations {
        querydsl.extendsFrom compileClasspath
    }

    compileQuerydsl {
        if (file(querydslDir).exists())
            delete(file(querydslDir))
    }

}


project(':drrr-api') {
    bootJar { enabled = false }
    jar { enabled = true }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation group: 'org.springframework.boot', name: 'spring-boot-docker-compose', version: '3.1.1'

        //swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

        */
/*jwt 시작*//*

        implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
        */
/*jwt 끝*//*


        //access token을 가져오거나 유저 정보를 가져올 때는 실제로 Oauth 서버와 통신을 해야 하기 때문에 WebClient를 사용하여 통신을 위한 WebFlux 추가
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        //gson
        implementation 'com.google.code.gson:gson:2.8.8'


        //json Parser
        implementation 'org.json:json:20210307'

        */
/*jwt 끝*//*

        // 카카오 API 및 인증 처리 라이브러리
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        // oauth security nimbus jose jwt
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

        //쿼리를 잘 알아보게 해준다.
        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
        //logback 관련 라이브러리
        implementation group: 'com.github.maricn', name: 'logback-slack-appender', version: '1.6.1'
    }


}*/


/*
buildscript {
    ext {
        springBootVersion = '3.2.0-M1'
        queryDslVersion = '5.0.0'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.1.2.RELEASE"
        // Querydsl 의존성
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}"
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = '17'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    apply plugin: "com.ewerk.gradle.plugins.querydsl"
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.jetbrains:annotations:23.0.0'
        implementation 'com.h2database:h2'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.springframework.security:spring-security-test'

        // === QueryDsl 시작 ===

        // == 스프링 부트 3.0 이상 ==
        // for QueryDSL
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        // === QueryDsl 끝 ===

        // mysql connector
        runtimeOnly 'com.mysql:mysql-connector-j'

    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    // QueryDSL 설정
    def querydslDir = "$buildDir/generated/querydsl"

    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        querydslSourcesDir = querydslDir
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', querydslDir]
            }
        }
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    configurations {
        querydsl.extendsFrom compileClasspath
    }

    compileQuerydsl {
        if (file(querydslDir).exists())
            delete(file(querydslDir))
    }

}


project(':drrr-api') {
    bootJar { enabled = false }
    jar { enabled = true }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation group: 'org.springframework.boot', name: 'spring-boot-docker-compose', version: '3.1.1'

        //swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

        */
/*jwt 시작*//*

        implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
        */
/*jwt 끝*//*


        //access token을 가져오거나 유저 정보를 가져올 때는 실제로 Oauth 서버와 통신을 해야 하기 때문에 WebClient를 사용하여 통신을 위한 WebFlux 추가
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

        //gson
        implementation 'com.google.code.gson:gson:2.8.8'


        //json Parser
        implementation 'org.json:json:20210307'

        */
/*jwt 끝*//*

        // 카카오 API 및 인증 처리 라이브러리
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        // oauth security nimbus jose jwt
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

        //쿼리를 잘 알아보게 해준다.
        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

        //logback 관련 라이브러리
        implementation group: 'com.github.maricn', name: 'logback-slack-appender', version: '1.6.1'
    }


    project(':drrr-batch') {
        bootJar { enabled = true }
        jar { enabled = false }

        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-batch'
            testImplementation 'org.springframework.batch:spring-batch-test'
            implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
        }
    }

}*/

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0-M2'
    id 'io.spring.dependency-management' version '1.1.3'
}

allprojects {
    apply plugin: 'java'
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = '17'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation project(":drrr-core")

        compileOnly 'org.projectlombok:lombok'

        //developmentOnly 'org.springframework.boot:spring-boot-devtools'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'


    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}
